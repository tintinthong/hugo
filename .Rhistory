dat_train <- dat_mod_cv[ splitIndex,]
dat_test  <- dat_mod_cv[-splitIndex,]
dat_train
dat_mod_cv
splitIndex <- createDataPartition(dat_mod_cv$delinquint, p = .75, list = FALSE, times = 1)
dat_train <- dat_mod_cv[ splitIndex,]
dat_test  <- dat_mod_cv[-splitIndex,]
splitIndex
dat_train
preProcValues <- preProcess(dat_train, method = c("BoxCox","nzv","center","scale") )
dat_train_trans<-predict(preProcValues, dat_train)
dat_train_trans
train_mod<-train(delinquint~.,data=dat_train_trans,method="glm",family=binomial(),
trControl=fitControl)
paste("Accuracy", train_mod$results$Accuracy)
paste("AccuracySD", train_mod$results$AccuracySD)
train_mod
paste("Accuracy", train_mod$results$Accuracy)
summary(train_mod)
predict(train_mod, newdata=dat_test)
dat_train_trans
dat_test_trans<-predict(preProcValues,dat_test)
dat_test_trans
dat_train_trans<-predict(preProcValues, dat_train)
dat_test_trans<-predict(preProcValues,dat_test)
dat_test_trans
predict(train_mod, newdata=dat_test,type="raw")
predictions<-predict(train_mod, newdata=dat_test,type="raw")
confusionMatrix(predictions, dat_test$Delinquint)
dat_test$Delinquint
dat_test
confusionMatrix(predictions, dat_test$delinquint)
preProcValues_train <- preProcess(dat_train, method = c("BoxCox","nzv","center","scale") )
preProcValues_test <- preProcess(dat_test, method = c("BoxCox","nzv","center","scale") )
dat_train_trans<-predict(preProcValues_train, dat_train)
dat_test_trans<-predict(preProcValues_trans,dat_test)
dat_test_trans<-predict(preProcValues_test,dat_test)
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10,
savePredictions = TRUE
)
train_mod<-train(delinquint~.,data=dat_train_trans,method="glm",family=binomial(),
trControl=fitControl)
predictions<-predict(train_mod, newdata=dat_test,type="raw")
confusionMatrix(predictions, dat_test$delinquint)
varImp(train_mod) %>% plot()
predictions<-predict(train_mod, newdata=dat_test_trans,type="raw")
confusionMatrix(predictions, dat_test$delinquint)
confusionMatrix(predictions, dat_test_trans$delinquint)
train_mod
paste("Accuracy", train_mod$results$Accuracy)
paste("AccuracySD", train_mod$results$AccuracySD)
varImp(train_mod)
varImp(train_mod)%>% plot()
dat_loan_tidy %>% group_by(anon_ssn) %>% mutate(Nanon_ssn=n(),n_anon=sum(delinquint=="Delinquint"))  %>% mutate(prop_anon=n_anon/Nanon_ssn) %>% select(anon_ssn,Nanon_ssn, delinquint, prop_anon)%>%
ggplot(aes(prop_anon,fill=delinquint))+geom_bar(position="fill")+
theme_bw() +
theme(aspect.ratio = 1, legend.position = "none")
#confusionMatrix(table(as.factor(predict_vec), as.factor(binDelinquint))  )
#sensitivity(as.factor(predict_vec),as.factor(binDelinquint))
#specificity(as.factor(predict_vec),as.factor(binDelinquint))
#posPredValue(as.factor(predict_vec),as.factor(binDelinquint))
#negPredValue(as.factor(predict_vec),as.factor(binDelinquint))
dat_mod2<-dat_loan_tidy %>%
group_by(anon_ssn) %>% mutate(Nanon_ssn=n(),n_anon=sum(delinquint=="Delinquint"))  %>%
mutate(prop_anon=n_anon/Nanon_ssn)%>% ungroup()%>%
separate( applicationDate, into = c("year", "month", "day"), sep="-",remove=FALSE) %>%
mutate(year=as.factor(year), month=as.factor(month))%>%
mutate(quart=fct_collapse(month,quart1=vec1, quart2=vec2, quart3=vec3, quart4=vec4))%>%
mutate(apr= cut(apr,breaks=c(-Inf,40,60,80,100, Inf), include.lowest=TRUE))%>%
select(vec_num,vec_fac2, year,month, state, delinquint, prop_anon)
mod2<-glm(delinquint~.,dat_mod2, family="binomial")
summary(mod2)
BIC(mod2)
Anova(mod2)
score<-predict(mod2,type="response")
score<-predict(mod2,type="raw")
score<-predict(mod2,type="response")
hist(score)
dat_predict<-data.frame( outcome= ifelse(score>0.5, TRUE, FALSE) )
dat_predict%>% ggplot(aes(outcome,fill=outcome)) +geom_bar(col="black")
dat_predict %>%group_by(outcome)%>% summarise(n=n())%>% mutate(prop=n/sum(n))
predict_vec<-ifelse(score>0.5, 1, 0)
binDelinquint<-dat_loan_tidy%>%mutate(binDelinquint=ifelse(delinquint=="Delinquint",1,0))%>%`$`(binDelinquint)
confusionMatrix(predict_vec,binDelinquint)
confusionMatrix(as.factor(predict_vec),as.factor(binDelinquint))
score
dat_predict<-data.frame( outcome= ifelse(score>0.5, "Delinquint", "NonDelinquint") )
dat_predict%>% ggplot(aes(outcome,fill=outcome)) +geom_bar(col="black")
dat_predict %>%group_by(outcome)%>% summarise(n=n())%>% mutate(prop=n/sum(n))
dat_predict<-data.frame( outcome= ifelse(score>0.5, "NonDelinquint", "Delinquint") )
dat_predict%>% ggplot(aes(outcome,fill=outcome)) +geom_bar(col="black")
dat_predict %>%group_by(outcome)%>% summarise(n=n())%>% mutate(prop=n/sum(n))
dat_predict
confusionMatrix(dat_predict$outcome,dat_mod2$delinquint)
hist(score)
confusionMatrix(dat_predict$outcome,dat_mod2$delinquint)
mod2<-glm(delinquint~.,dat_mod2, family="binomial")
summary(mod2)
BIC(mod2)
score<-predict(mod2,type="response")
dat_predict<-data.frame( outcome= ifelse(score>0.5, "NonDelinquint", "Delinquint") )
dat_predict%>% ggplot(aes(outcome,fill=outcome)) +geom_bar(col="black")
dat_predict %>%group_by(outcome)%>% summarise(n=n())%>% mutate(prop=n/sum(n))
confusionMatrix(dat_predict$outcome,dat_mod2$delinquint)
confusionMatrix(dat_predict$outcome,dat_mod2$delinquint)
dat_loan_tidy$nPaidOff
dat_loan_tidy %>% filter(nPaidOff>1)
dat_mod2 %>% filter(nPaidOff>1) %>% select(loanId, anon_ssn, prop_anon, nPaidOff,delinquint)
dat_mod2 %>% filter(nPaidOff>1) %>% select( anon_ssn, prop_anon, nPaidOff,delinquint)
dat_loan_tidy %>% filter(nPaidOff>1) %>% select(prop_anon, nPaidOff,delinquint) %>% mutate(Nanon_ssn=ndat (),n_anon=sum(delinquint=="Delinquint"))  %>%
mutate(prop_anon=n_anon/Nanon_ssn)%>% ungroup()%>% select(loanId, anon_ssn, prop_anon, nPaidOff,delinquint)
dat_loan_tidy %>% filter(nPaidOff>1) %>% select(prop_anon, nPaidOff,delinquint) %>% mutate(Nanon_ssn=ndat (),n_anon=sum(delinquint=="Delinquint"))  %>%
+     mutate(prop_anon=n_anon/Nanon_ssn)%>% ungroup()
dat_loan_tidy %>% filter(nPaidOff>1) %>% mutate(Nanon_ssn=ndat (),n_anon=sum(delinquint=="Delinquint"))  %>%
+     mutate(prop_anon=n_anon/Nanon_ssn)%>% ungroup()
dat_loan_tidy %>%
group_by(anon_ssn) %>% mutate(Nanon_ssn=n(),n_anon=sum(delinquint=="Delinquint"))  %>%
mutate(prop_anon=n_anon/Nanon_ssn)%>% ungroup()
dat_loan_tidy %>%
group_by(anon_ssn) %>% mutate(Nanon_ssn=n(),n_anon=sum(delinquint=="Delinquint"))  %>%
mutate(prop_anon=n_anon/Nanon_ssn)%>% ungroup() %>% select(loanId, anon_ssn, prop_anon, nPaidOff,delinquint)
dat_loan_tidy %>%
group_by(anon_ssn) %>% mutate(Nanon_ssn=n(),n_anon=sum(delinquint=="Delinquint"))  %>%
mutate(prop_anon=n_anon/Nanon_ssn)%>% ungroup() %>% select(loanId, anon_ssn, prop_anon, nPaidOff,delinquint) %>% arrange()
dat_loan_tidy %>%
group_by(anon_ssn) %>% mutate(Nanon_ssn=n(),n_anon=sum(delinquint=="Delinquint"))  %>%
mutate(prop_anon=n_anon/Nanon_ssn)%>% ungroup() %>% select(loanId, anon_ssn, prop_anon, nPaidOff,delinquint) %>% arrange(anon_ssn)
dat_loan_tidy %>%
group_by(anon_ssn) %>% mutate(Nanon_ssn=n(),n_anon=sum(delinquint=="Delinquint"))  %>%
mutate(prop_anon=n_anon/Nanon_ssn)%>% ungroup() %>% select(loanId, anon_ssn, prop_anon, nPaidOff,delinquint) %>% arrange(anon_ssn)%>%View()
knitr::opts_chunk$set(echo = TRUE)
#loading libraries
library(tidyverse)
#loading libraries
library(tidyverse)
library(caret) #modelling
library(gridExtra)#make grid for plotting
library(urbnmapr) #map plotting
library(scales) #add scales to plot
library(car)
library(ggcorrplot) #for correlation plot
library(car)
library(ggcorrplot) #for correlation plot
#load data
dat_loan<-read.csv("./data/loan.csv",na.strings=c(""," "))
dat_pay<-read.csv("./data/payment.csv",na.strings=c(""," "))
dat_clarity<-read.csv("./data/clarity_underwriting_variables.csv",na.strings=c(""," "))
#numeric/factor
doPlots3<- function(data_in, fun, vec, ncol=3) {
pp <- list()
for(item in vec){
print(paste(item))
p <- fun(data_in=data_in, xname=item)
pp <- c(pp, list(p))
}
if(length(pp)>6){
pp
}else{
do.call("grid.arrange", c(pp, ncol=ncol))
}
}
plotDensity2d2<-function(data_in, xname, yname){
data <- data_in %>%  select(xname,yname)
p <- ggplot(data=data, aes_string(x=xname,y=yname)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")+
xlab(xname)+
theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1)) +
theme(legend.position='none')+theme(aspect.ratio = 1, legend.position = "none") +
ggtitle(paste("Density 2d",xname, "vs", yname))
return(p)
}
#factor
plotBar2 <- function(data_in, xname) {
data <- data_in %>% select(xname)
p <- ggplot(data=data, aes_string(x=xname)) + geom_bar(aes(group=data_in$delinquint,fill=data_in$delinquint, alpha=0.2),position="dodge",color="black") + xlab(xname) + theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1)) + theme(legend.position='none')+theme(aspect.ratio = 1, legend.position = "none") +
ggtitle(paste("Bar",xname))
return (p)
}
#factor
plotBarFill2 <- function(data_in, xname) {
data <- data_in %>%  select(xname)
p <- ggplot(data=data, aes_string(x=xname)) + geom_bar(aes(group=data_in$delinquint,fill=data_in$delinquint, alpha=0.2),position="fill",color="black") + xlab(xname) + theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1)) + theme(legend.position='none')+theme(aspect.ratio = 1, legend.position = "none") +
ggtitle(paste("BarFill",xname))
return (p)
}
doProp<-function(data_in,vec){
pp <- list()
for(item in vec){
print(paste(item))
p <- data_in%>% select(item,"delinquint")%>% group_by(.dots=c(item,"delinquint") ) %>% summarise(n=n()) %>% mutate(prop=n/sum(n))
pp <- c(pp, list(p))
}
return(pp)
}
plotLine2<-function(data_in, xname, yname){
data <- data_in %>%  select(xname,yname)
p <- ggplot(data=data, aes_string(x=xname,y=yname)) +
geom_point(aes(group=data_in$delinquint,color=data_in$delinquint))+
facet_wrap(~data_in$delinquint)+
xlab(xname)+
theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1)) +
theme(legend.position='none')+theme(aspect.ratio = 1, legend.position = "none") +
ggtitle(paste("Line",xname, "vs", yname))
return(p)
}
#numeric
plotDen2 <- function(data_in, xname) {
data<-data_in%>%select(xname)
p <- ggplot(data=data, aes_string(x=xname)) + geom_density(aes(group=data_in$delinquint,color=data_in$delinquint,fill=data_in$delinquint, alpha=0.2)) + xlab(xname) + theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1)) + theme(legend.position='none')+theme(aspect.ratio = 1, legend.position = "none") +
ggtitle(paste("Density",xname))
return (p)
}
#vec_num vec_fac
doPlots4<- function(data_in, fun, vec1, vec2, ncol=3) {
mat_comb<-function(vec1,vec2){
vals<-c(vec1,vec2)
vals<-unique(vals)
return(as.data.frame (t(combn(vals, 2))) )
}
dat_var<-mat_comb(vec1, vec2)
pp <- list()
for(i in 1:nrow(dat_var)){
for(j in 1:ncol(dat_var)){
print(paste(i,j,dat_var[i,j]))
p <- fun(data_in=data_in, dat_var[i,1], dat_var[i,2])
pp <- c(pp, list(p))
}
}
return(pp)
}
#numeric, factor, TARGET
plotBoxplot2<-function(data_in,xname,yname){
data <- data_in %>%  select(xname,yname)
p <- ggplot(data=data, aes_string(x=data_in$delinquint,y=xname)) +
geom_boxplot(aes(group=data_in$delinquint,fill=data_in$delinquint),color="black")+
facet_wrap(as.formula(paste("~",yname) ))+
#facet_wrap(as.formula(paste("~", yname)))+
#facet_grid(as.formula(paste("~", yname)))+
xlab(xname)+
theme_light() +
theme(axis.text.x = element_text(angle = 90, hjust =1)) +
theme(legend.position='none')+theme(aspect.ratio = 1, legend.position = "none") +
ggtitle(paste("BarFill",xname, "vs", yname))
return (p)
}
#separate into bbinary
vec_delinquint<-c("Charged Off", "Settlement Pending Paid Off","Settlement Paid Off","Settled Bankruptcy", "External Collection", "Internal Collection")
vec_nondelinquint<-c("Charged Off Paid Off", "Paid Off Loan")
vec_target<-c(vec_delinquint,vec_nondelinquint)
#prep dat_loan_tidy
dat_loan_tidy<- dat_loan %>%
filter(str_detect(loanId,"LL"))%>%
separate(col=applicationDate, into=c("applicationDate","applicationTime"),sep="T",remove=TRUE)%>%
mutate(applicationDate=as.Date(applicationDate,format="%Y-%m-%d"))%>%
separate(col=originatedDate, into=c("originatedDate","originatedTime"),sep="T",remove=TRUE)%>%
mutate(originatedDate=as.Date(originatedDate,format="%Y-%m-%d"))%>%
mutate(isFunded=as.factor(isFunded),hasCF=as.factor(hasCF),nPaidOff=as.integer(nPaidOff),apr=as.numeric(apr),loanAmount=as.numeric(loanAmount)) %>%
select(-clarityFraudId,-hasCF,-applicationTime, -originatedTime)%>% #-anon_ss
drop_na()%>% #-anon_ssn
filter(loanStatus %in% vec_target)%>%
droplevels()%>%
mutate(delinquint= fct_collapse(loanStatus, Delinquint=vec_delinquint, NonDelinquint=vec_nondelinquint),loanStatus=NULL)%>%
select(-isFunded, -originated, -approved)
dat_loan_tidy %>% ggplot(aes(delinquint, fill=delinquint))+geom_bar(color="black")
dat_loan_tidy %>% ggplot(aes(delinquint, fill=delinquint))+geom_bar(color="black")
dat_loan_tidy%>%group_by(delinquint) %>% summarise(n=n())%>%mutate(prop=n/sum(n))
#checking for NAs
dat_loan %>%
select(everything()) %>%
summarise_all(funs(sum(is.na(.))))%>% select(which(colSums(.)> 0))
dat_loan_tidy %>% ggplot( aes(x = originatedDate, y = applicationDate))+geom_point()
dat_loan_tidy %>% ggplot( aes(x = originatedDate, y = applicationDate))+geom_point()
dat_loan_tidy %>% select(originatedDate, applicationDate )%>%
mutate(originatedDateNum= as.numeric(originatedDate),applicationDateNum= as.numeric(applicationDate), applicationDate=NULL, originatedDate=NULL) %>%
cor()
p1<-plotDensity2d2(dat_loan_tidy,"loanAmount","apr")
p2<-plotDensity2d2(dat_loan_tidy,"originallyScheduledPaymentAmount","apr")
p3<-plotDensity2d2(dat_loan_tidy,"loanAmount","originallyScheduledPaymentAmount")
pp<-list(p1,p2,p3)
do.call("grid.arrange", c(pp, ncol=2))
dat_loan_tidy %>%  group_by(leadType,delinquint) %>% summarise(mean=mean(leadCost))
dat_loan_tidy %>%filter(leadCost>0)%>%ggplot(aes(leadType,leadCost,fill=delinquint))+geom_boxplot()
#(factor)
vec_fac<-dat_loan_tidy%>%select_if(is.factor)%>%colnames()
vec_fac2<-vec_fac[-c(1,2,4,7)] #removing loanId, anon_ssn, state
doPlots3(dat_loan_tidy, plotBar2, vec_fac2)
doPlots3(dat_loan_tidy, plotBar2, vec_fac2)
doPlots3(dat_loan_tidy, plotBarFill2, vec_fac2)
vec_num<-dat_loan_tidy%>%select_if(is.numeric)%>%colnames()
doPlots3(dat_loan_tidy, plotDen2, vec_num)
doPlots3(dat_loan_tidy, plotDen2, vec_num)
plot1<-dat_loan_tidy%>% ggplot(aes(log(nPaidOff), fill=delinquint))+geom_density(color="black",alpha = 0.4)
plot2<-dat_loan_tidy %>% ggplot(aes(log(leadCost), fill=delinquint))+geom_density(color="black",alpha = 0.4)
plot2<-dat_loan_tidy %>% ggplot(aes(log(leadCost), fill=delinquint))+geom_density(color="black",alpha = 0.4)
grid.arrange(plot1, plot2, ncol=2)
dat_loan_tidy%>%group_by(nPaidOff) %>% summarise(n=n())%>%mutate(prop=n/sum(n))
is.date <- function(x) inherits(x, 'Date')
vec_date<-dat_loan_tidy %>% select_if(is.date) %>% colnames()
p1<-dat_loan_tidy %>% separate( applicationDate, into = c("year", "month", "day"), sep="-",remove=FALSE) %>%
mutate(year=as.factor(year), month=as.factor(month))%>%
ggplot(aes(month, fill=delinquint))+ #x = month,
geom_bar(position="dodge")+
facet_wrap(~year)+theme(aspect.ratio = 1, legend.position = "none")
p2<-dat_loan_tidy %>% separate( applicationDate, into = c("year", "month", "day"), sep="-",remove=FALSE) %>%
mutate(year=as.factor(year), month=as.factor(month))%>%
ggplot(aes(month, fill=delinquint))+ #x = month,
geom_bar(position="fill")+
facet_wrap(~year)+
scale_y_continuous(labels = percent_format())+theme(aspect.ratio = 1, legend.position = "none")
pp<-list(p1,p2)
do.call("grid.arrange", c(pp, ncol=2))
dat_state_plot<-dat_loan_tidy%>% select(state,delinquint) %>% group_by(state, delinquint) %>% summarise(n=n())%>%mutate(prop=n/sum(n))%>% ungroup() %>% filter(delinquint == "Delinquint")
dat_state_plot%>%mutate(state_abbv=as.character(state))%>% left_join(states, by="state_abbv")%>% ggplot() +
geom_polygon(mapping = aes(long, lat, group = group, fill = prop), color = "black", size = .25) +
scale_fill_gradientn(colours = terrain.colors(20))+
#scale_fill_gradient2(low = "red", high = "green")+
coord_map(projection = "albers", lat0 = 39, lat1 = 45)+
labs(title="Delinquint in State")+
geom_text(data = get_urbn_labels(map = "states"), aes(x = long, lat, label = state_abbv),
size = 1.5)
dat_mod<-dat_loan_tidy %>% select(vec_num,vec_fac2, delinquint)
mod<-glm(delinquint~.,dat_mod, family="binomial")
summary(mod)
Anova(mod)
Anova(mod)
mod_step<-step(mod, k= log(nrow(dat_mod))) #BIC selection
Anova(mod)
mod_step<-step(mod, k= log(nrow(dat_mod))) #BIC selection
1-pchisq(33685,29479)
vif(mod)
score<-predict(mod,type="response")
hist(score)
dat_predict<-data.frame( outcome= ifelse(score>0.5, TRUE, FALSE) )
dat_predict%>% ggplot(aes(outcome,fill=outcome)) +geom_bar(col="black")
dat_predict %>%group_by(outcome)%>% summarise(n=n())%>% mutate(prop=n/sum(n))
set.seed(1)
dat_mod_cv<-dat_loan_tidy %>% select(vec_num,vec_fac2, delinquint)
splitIndex <- createDataPartition(dat_mod_cv$delinquint, p = .75, list = FALSE, times = 1)
dat_train <- dat_mod_cv[ splitIndex,]
dat_test  <- dat_mod_cv[-splitIndex,]
preProcValues_train <- preProcess(dat_train, method = c("BoxCox","nzv","center","scale") )
preProcValues_train <- preProcess(dat_train, method = c("BoxCox","nzv","center","scale") )
preProcValues_test <- preProcess(dat_test, method = c("BoxCox","nzv","center","scale") )
dat_train_trans<-predict(preProcValues_train, dat_train)
dat_test_trans<-predict(preProcValues_test,dat_test)
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10,
savePredictions = TRUE
)
train_mod<-train(delinquint~.,data=dat_train_trans,method="glm",family=binomial(),
trControl=fitControl)
train_mod<-train(delinquint~.,data=dat_train_trans,method="glm",family=binomial(),
trControl=fitControl)
paste("Accuracy", train_mod$results$Accuracy)
paste("AccuracySD", train_mod$results$AccuracySD)
summary(train_mod)
predictions<-predict(train_mod, newdata=dat_test_trans,type="raw")
confusionMatrix(predictions, dat_test_trans$delinquint)
varImp(train_mod)%>% plot()
dat_loan_tidy %>% group_by(anon_ssn) %>% mutate(Nanon_ssn=n(),n_anon=sum(delinquint=="Delinquint"))  %>% mutate(prop_anon=n_anon/Nanon_ssn) %>% select(anon_ssn,Nanon_ssn, delinquint, prop_anon)%>%
ggplot(aes(prop_anon,fill=delinquint))+geom_bar(position="fill")+
theme_bw() +
theme(aspect.ratio = 1, legend.position = "none")
dat_loan_tidy %>% group_by(anon_ssn) %>% mutate(Nanon_ssn=n(),n_anon=sum(delinquint=="Delinquint"))  %>% mutate(prop_anon=n_anon/Nanon_ssn)
#(applicationDate (month) x delinquint x leadType)
p1<-dat_loan_tidy %>% separate( applicationDate, into = c("year", "month", "day"), sep="-",remove=FALSE) %>%
mutate(year=as.factor(year), month=as.factor(month))%>%
ggplot(aes(month, fill=delinquint))+ #x = month,
geom_bar(position="fill")+scale_y_continuous(labels = percent_format())+theme(aspect.ratio = 1, legend.position = "none")
#(applicationDate (quarter) x delinquint x leadType)
vec1<-paste("0",1:3,sep="")
vec2<-paste("0",4:6,sep="")
vec3<-paste("0",7:9,sep="")
vec4<-as.character(10:12)
p2<-dat_loan_tidy %>% separate( applicationDate, into = c("year", "month", "day"), sep="-",remove=FALSE) %>%
mutate(year=as.factor(year), month=as.factor(month))%>%
mutate(quart=fct_collapse(month,quart1=vec1, quart2=vec2, quart3=vec3, quart4=vec4)) %>%
ggplot(aes(quart, fill=delinquint))+ #x = month,
geom_bar(position="fill")+
scale_y_continuous(labels = percent_format())+theme(aspect.ratio = 1, legend.position = "none")
pp<-list(p1,p2)
do.call("grid.arrange", c(pp, ncol=2))
#(applicationDate (month) x delinquint x leadType)
p1<-dat_loan_tidy %>% separate( applicationDate, into = c("year", "month", "day"), sep="-",remove=FALSE) %>%
mutate(year=as.factor(year), month=as.factor(month))%>%
ggplot(aes(month, fill=delinquint))+ #x = month,
geom_bar(position="dodge")+scale_y_continuous(labels = percent_format())+theme(aspect.ratio = 1, legend.position = "none")
#(applicationDate (quarter) x delinquint x leadType)
vec1<-paste("0",1:3,sep="")
vec2<-paste("0",4:6,sep="")
vec3<-paste("0",7:9,sep="")
vec4<-as.character(10:12)
p2<-dat_loan_tidy %>% separate( applicationDate, into = c("year", "month", "day"), sep="-",remove=FALSE) %>%
mutate(year=as.factor(year), month=as.factor(month))%>%
mutate(quart=fct_collapse(month,quart1=vec1, quart2=vec2, quart3=vec3, quart4=vec4)) %>%
ggplot(aes(quart, fill=delinquint))+ #x = month,
geom_bar(position="dodge")+
scale_y_continuous(labels = percent_format())+theme(aspect.ratio = 1, legend.position = "none")
pp<-list(p1,p2)
do.call("grid.arrange", c(pp, ncol=2))
dat_mod2<-dat_loan_tidy %>%
group_by(anon_ssn) %>% mutate(Nanon_ssn=n(),n_anon=sum(delinquint=="Delinquint"))  %>%
mutate(prop_anon=n_anon/Nanon_ssn)%>% ungroup()%>%
separate( applicationDate, into = c("year", "month", "day"), sep="-",remove=FALSE) %>%
mutate(year=as.factor(year), month=as.factor(month))%>%
mutate(quart=fct_collapse(month,quart1=vec1, quart2=vec2, quart3=vec3, quart4=vec4))%>%
mutate(apr= cut(apr,breaks=c(-Inf,40,60,80,100, Inf), include.lowest=TRUE))%>%
select(vec_num,vec_fac2, year,month, state, delinquint, prop_anon)
mod2<-glm(delinquint~.,dat_mod2, family="binomial")
summary(mod2)
BIC(mod2)
score<-predict(mod2,type="response")
dat_predict<-data.frame( outcome= ifelse(score>0.5, "NonDelinquint", "Delinquint") )
dat_predict%>% ggplot(aes(outcome,fill=outcome)) +geom_bar(col="black")
dat_predict %>%group_by(outcome)%>% summarise(n=n())%>% mutate(prop=n/sum(n))
confusionMatrix(dat_predict$outcome,dat_mod2$delinquint)
score
dat_loan_tidy %>%
group_by(anon_ssn) %>% mutate(Nanon_ssn=n(),n_anon=sum(delinquint=="Delinquint"))  %>%
mutate(prop_anon=n_anon/Nanon_ssn)%>% ungroup() %>% select(loanId, anon_ssn, prop_anon, nPaidOff,delinquint) %>% arrange(anon_ssn)%>%View()
"shiny" %in% rownames(installed.packages())
install.packages("shiny")
library(shiny)
install.packages("xcrun")
"devtools" %in% rownames(installed.packages())
install.packages("devtools")
library("shiny")
install.packages("shiny")
install.pacakges("httpuv")
install.packages("httpuv")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)} #load / install+load installr
install.packages("installr");
version
library("shiny")
devtools::install_github("rstudio/httpuv")
"shiny" %in% rownames(installed.packages())
devtools::install_github("rstudio/httpuv")
install.package("shiny")
install.packages("shiny")
library("shiny")
runExample("01_hello")
library(shiny)
runApp(newdir)
setwd("~/Documents/GitHub/hugo")
runApp(newdir)
runApp("newdir")
install.packages("shinyWidgets")
runApp("newdir")
runApp("newdir")
#S: Stimulus
Sn   <- c("amble",  "crawl",  "creep",  "dart",  "dash",    "halt",    "hike",
"hobble", "hurry",  "hustle", "jog",   "jostle",  "lag",     "limp",
"linger", "loiter", "lumber", "march", "pace",    "plod",    "push",
"race",   "ramble", "run",    "rush",  "saunter", "scamper", "scurry",
"shove",  "skip",   "sprint", "stalk", "stand",   "step",    "stride",
"strut",  "tarry",  "tramp",  "tread", "trot",    "trudge",  "walk")
length(Sn)
Ss <- length(Sn)        # stimulus count
So <- c(1:Ss)           # stimulus order
So
Sp <- sample(So)        # stimulus order repeat for each person measure
Sp
x<-c("aggressive",   "agile",        "alert",        "animalistic",
"changing",     "competitive",  "debilitated",  "deliberate",
"fast",         "forceful",     "goal focused", "group",
"happy",        "intermittent", "long motion",  "long term",
"moving",       "stealth",      "strenuous",    "urgent",
"vertical", #   "delicate",     "graceful",
"articulate", "beautiful", "complex", "clear", # or "vague"
"distinct", "evocative", "positive")
length(x)
runApp("newdir")
runApp("newdir")
runApp("newdir")
runApp("newdir")
runApp("newdir")
runApp("newdir")
runApp("newdir")
runApp("newdir")
runApp('newdir')
runApp("newdir")
runApp("newdir")
runApp("newdir")
runApp("newdir")
runApp('newdir')
rm(list=())
rm(list=ls())
runApp('newdir')
runApp('newdir')
runApp('newdir')
runApp('newdir')
install.packages("shinythemes")
runApp('newdir')
library(shinythemes)
runApp('newdir')
library(shinythemes)
runApp('newdir')
runApp('newdir')
